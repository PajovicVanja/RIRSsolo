name: Backend CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  checkout-code:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

  setup-node:
    runs-on: ubuntu-latest
    needs: checkout-code

    steps:
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18

  cache-dependencies:
    runs-on: ubuntu-latest
    needs: setup-node

    steps:
    - name: Cache node_modules
      uses: actions/cache@v3
      with:
        path: backend/node_modules
        key: ${{ runner.os }}-backend-${{ hashFiles('backend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-backend-

  install-dependencies:
    runs-on: ubuntu-latest
    needs: cache-dependencies

    steps:
    - name: Install dependencies
      run: |
        cd backend
        npm ci

  build-backend:
    runs-on: ubuntu-latest
    needs: install-dependencies

    steps:
    - name: Build backend
      run: |
        cd backend
        npm run build

    - name: Store build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: backend-build
        path: backend/dist/

  run-tests:
    runs-on: ubuntu-latest
    needs: install-dependencies

    steps:
    - name: Set up environment variables
      run: |
        echo "FIREBASE_PROJECT_ID=${{ vars.FIREBASE_PROJECT_ID }}" >> $GITHUB_ENV
        echo "FIREBASE_AUTH_URI=${{ vars.FIREBASE_AUTH_URI }}" >> $GITHUB_ENV
        echo "FIREBASE_CLIENT_EMAIL=${{ vars.FIREBASE_CLIENT_EMAIL }}" >> $GITHUB_ENV
        echo "FIREBASE_CLIENT_ID=${{ vars.FIREBASE_CLIENT_ID }}" >> $GITHUB_ENV
        echo "FIREBASE_TOKEN_URI=${{ vars.FIREBASE_TOKEN_URI }}" >> $GITHUB_ENV
        echo "FIREBASE_PRIVATE_KEY=${{ secrets.FIREBASE_PRIVATE_KEY }}" >> $GITHUB_ENV

    - name: Debug environment variables
      run: printenv | grep FIREBASE

    - name: Run tests with coverage
      run: |
        cd backend
        npm test -- --coverage

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: backend-coverage
        path: backend/coverage/

  build-and-push-docker-image:
    runs-on: ubuntu-latest
    needs: build-backend

    steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and tag Docker image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/company-vehicle-management:latest -f Dockerfile.dockerhub .

    - name: Push Docker image to Docker Hub
      run: |
        docker push ${{ secrets.DOCKER_USERNAME }}/company-vehicle-management:latest

    - name: Trigger Render deploy
      env:
        RENDER_DEPLOY_HOOK: ${{ secrets.RENDER_DEPLOY_HOOK }}
      run: |
        curl -X POST $RENDER_DEPLOY_HOOK