name: Backend CI/CD

on:
  push:
    branches:
      - main
      - production
  pull_request:
    branches:
      - main
      - production

jobs:
  build-and-cache:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18

    - name: Cache node_modules
      uses: actions/cache@v3
      with:
        path: backend/node_modules
        key: ${{ runner.os }}-backend-${{ hashFiles('backend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-backend-

    - name: Install dependencies
      run: |
        cd backend
        npm ci

    - name: Build backend
      run: |
        cd backend
        npm run build

    - name: Create test environment file
      run: |
        echo "FIREBASE_PROJECT_ID=${{ vars.FIREBASE_PROJECT_ID }}" >> $GITHUB_ENV
        echo "FIREBASE_AUTH_URI=${{ vars.FIREBASE_AUTH_URI }}" >> $GITHUB_ENV
        echo "FIREBASE_CLIENT_EMAIL=${{ vars.FIREBASE_CLIENT_EMAIL }}" >> $GITHUB_ENV
        echo "FIREBASE_CLIENT_ID=${{ vars.FIREBASE_CLIENT_ID }}" >> $GITHUB_ENV
        echo "FIREBASE_TOKEN_URI=${{ vars.FIREBASE_TOKEN_URI }}" >> $GITHUB_ENV
        echo "FIREBASE_PRIVATE_KEY=${{ secrets.FIREBASE_PRIVATE_KEY }}" >> $GITHUB_ENV


    - name: Run tests with coverage
      run: |
        cd backend
        npm test -- --coverage --env-file=.env.test


    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: backend-coverage
        path: backend/coverage/

    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        java-version: 17
        distribution: 'temurin'

    - name: Debug Java Setup
      run: |
        echo "JAVA_HOME: $JAVA_HOME"
        ls $JAVA_HOME/bin
        $JAVA_HOME/bin/java -version

    - name: Prepare Environment for SonarCloud
      run: |
        export PATH=$JAVA_HOME/bin:$PATH
        echo "PATH updated for Java: $PATH"
        java -version

    - name: SonarCloud Scan
      uses: sonarsource/sonarcloud-github-action@v1.5
      with:
        projectBaseDir: backend
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        JAVA_HOME: $JAVA_HOME



    - name: Store build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: backend-build
        path: backend/dist/

  deploy-to-development:
    runs-on: ubuntu-latest
    needs: build-and-cache
    if: github.ref == 'refs/heads/main'
    environment:
      name: Development

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up environment variables
      run: |
        echo "FIREBASE_PROJECT_ID=${{ vars.FIREBASE_PROJECT_ID }}" >> $GITHUB_ENV
        echo "FIREBASE_AUTH_URI=${{ vars.FIREBASE_AUTH_URI }}" >> $GITHUB_ENV
        echo "FIREBASE_CLIENT_EMAIL=${{ vars.FIREBASE_CLIENT_EMAIL }}" >> $GITHUB_ENV
        echo "FIREBASE_CLIENT_ID=${{ vars.FIREBASE_CLIENT_ID }}" >> $GITHUB_ENV
        echo "FIREBASE_TOKEN_URI=${{ vars.FIREBASE_TOKEN_URI }}" >> $GITHUB_ENV
        echo "FIREBASE_PRIVATE_KEY=${{ secrets.FIREBASE_PRIVATE_KEY }}" >> $GITHUB_ENV

    - name: Debug environment variables
      run: printenv | grep FIREBASE

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and tag Docker image
      run: |
        docker buildx build \
          --tag ${{ secrets.DOCKER_USERNAME }}/company-vehicle-management:dev \
          --file Dockerfile.dockerhub \
          --push \
          .

    - name: Trigger Render deploy
      env:
        RENDER_DEPLOY_HOOK: ${{ secrets.RENDER_DEPLOY_HOOK }}
      run: |
        echo "Triggering Render deploy to Development"
        curl -X POST -H "Content-Type: application/json" -d '{}' $RENDER_DEPLOY_HOOK

  deploy-to-production:
    runs-on: ubuntu-latest
    needs: build-and-cache
    if: github.ref == 'refs/heads/production'
    environment:
      name: Production
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up environment variables
      run: |
        echo "FIREBASE_PROJECT_ID=${{ vars.FIREBASE_PROJECT_ID }}" >> $GITHUB_ENV
        echo "FIREBASE_AUTH_URI=${{ vars.FIREBASE_AUTH_URI }}" >> $GITHUB_ENV
        echo "FIREBASE_CLIENT_EMAIL=${{ vars.FIREBASE_CLIENT_EMAIL }}" >> $GITHUB_ENV
        echo "FIREBASE_CLIENT_ID=${{ vars.FIREBASE_CLIENT_ID }}" >> $GITHUB_ENV
        echo "FIREBASE_TOKEN_URI=${{ vars.FIREBASE_TOKEN_URI }}" >> $GITHUB_ENV
        echo "FIREBASE_PRIVATE_KEY=${{ secrets.FIREBASE_PRIVATE_KEY }}" >> $GITHUB_ENV

    - name: Debug environment variables
      run: printenv | grep FIREBASE

    - name: Check SonarCloud Quality Gate
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        STATUS=$(curl -s -u $SONAR_TOKEN: \
          "https://sonarcloud.io/api/qualitygates/project_status?projectKey=PajovicVanja_RIRSsolo" \
          | jq -r '.projectStatus.status')
        echo "Quality Gate Status: $STATUS"
        if [ "$STATUS" != "OK" ]; then
          echo "Quality Gate failed. Stopping the pipeline."
          exit 1
        fi

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and tag Docker image
      run: |
        docker buildx build \
          --tag ${{ secrets.DOCKER_USERNAME }}/company-vehicle-management:prod \
          --file Dockerfile.dockerhub \
          --push \
          .

    - name: Manual approval required
      if: ${{ github.event_name == 'push' }}
      run: echo "Waiting for manual approval before deployment"

    - name: Trigger Render deploy
      env:
        RENDER_DEPLOY_HOOK: ${{ secrets.RENDER_DEPLOY_HOOK }}
      run: |
        echo "Triggering Render deploy to Production"
        curl -X POST -H "Content-Type: application/json" -d '{}' $RENDER_DEPLOY_HOOK
